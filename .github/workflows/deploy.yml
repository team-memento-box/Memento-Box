name: Build and deploy Python app to VM
on:
  push:
    branches:
      - main_test
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'
      
      - name: Create and activate virtual environment + install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r app/requirements.txt
      
      - name: Debug - Show project structure
        run: |
          pwd
          ls -al
          ls -R
      - name: Create deployment package (app 폴더 기준)
        run: |
          tar --exclude='venv' --exclude='__pycache__' -czf deployment.tar.gz -C app .
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: deployment.tar.gz
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # SSH 키를 임시 파일에 저장하여 형식 확인
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa.tmp
          # 키 시작과 끝 라인 확인 및 수정
          sed -i 's/-----BEGIN OPENSSH PRIVATE KEY-----/-----BEGIN OPENSSH PRIVATE KEY-----/' ~/.ssh/id_rsa.tmp
          sed -i 's/-----END OPENSSH PRIVATE KEY-----/-----END OPENSSH PRIVATE KEY-----/' ~/.ssh/id_rsa.tmp
          # 최종 키 파일로 이동
          mv ~/.ssh/id_rsa.tmp ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          # 키 파일 검증
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Key validation failed"
      
      - name: Debug SSH key
        run: |
          echo "SSH key file info:"
          ls -la ~/.ssh/id_rsa
          echo "First few lines of key:"
          head -n 2 ~/.ssh/id_rsa
          echo "Last few lines of key:"
          tail -n 2 ~/.ssh/id_rsa
          echo "Key validation:"
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Key validation failed - checking if it's RSA format"
          # RSA 형식인지 확인
          if grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/id_rsa; then
            echo "RSA format detected"
          elif grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/id_rsa; then
            echo "OpenSSH format detected"
          else
            echo "Unknown key format"
          fi
      
      - name: SSH Debug
        run: ssh -vvv -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "echo 'Connection successful'"
  
      - name: Deploy to VM
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            # 기존 앱 백업
            if [ -d ~/fastapi_app ]; then
              cp -r ~/fastapi_app ~/fastapi_app_backup_$(date +%Y%m%d_%H%M%S)
            fi
            # 배포 디렉토리 준비
            rm -rf ~/fastapi_app/*
            mkdir -p ~/fastapi_app
          "
          # 배포 파일 전송
          scp -i ~/.ssh/id_rsa deployment.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/
          # VM에서 압축 해제 및 환경 구성
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            tar -xzf ~/deployment.tar.gz -C ~/fastapi_app/
            rm ~/deployment.tar.gz
            cd ~/fastapi_app
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            # systemd로 서비스 자동 재시작
            sudo systemctl restart fastapi-app || echo 'Service restart failed or not configured'
            echo 'Deployment completed successfully'
          "
      - name: Health Check
        run: |
          sleep 10
          curl -f http://${{ secrets.VM_HOST }}:8000/health || echo 'Health check endpoint not available'
